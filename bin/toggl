#!/usr/bin/env ruby

require 'optparse'
require 'httparty'

options = {
  format: :default,
}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on '--format=[default|bulk-create]', %i[default bulk-create] do |format|
    raise OptionParser::MissingArgument unless format
    options[:format] = format
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidArgument, OptionParser::MissingArgument
  $stderr.puts $!.to_s
  abort option_parser.help
end

if ARGV.size > 0
  abort option_parser.help
end

auth = {username: File.read(File.expand_path('~/.toggl')).chomp, password: 'api_token'}

start_date = Date.today - 14

time_entries = HTTParty.get 'https://www.toggl.com/api/v8/time_entries', basic_auth: auth, query: {start_date: start_date.to_time.iso8601}

footer_text = "Total:"
max_name_len = footer_text.size

entries = time_entries.map do |entry|
  time_start = Time.parse(entry['start']).getlocal
  time_stop = entry['stop'] ? Time.parse(entry['stop']).getlocal : Time.now
  date = time_start.to_date
  name = entry['description'] || '(no description)'
  max_name_len = [max_name_len, name.size].max

  {
    date: date,
    name: name,
    duration: time_stop - time_start
  }
end

days = {}
entries.each do |entry|
  day = days[entry[:date]] ||= Hash.new(0.0)
  day[entry[:name]] += entry[:duration]
end

days.values.each do |tasks|
  if tasks.size > 1 && overhead = tasks.delete('overhead')
    total = tasks.values.inject(:+)
    tasks.keys.each do |name|
      tasks[name] *= (total + overhead) / total
    end
  end
end

def format_hours(duration)
  hours = (duration / 3600.0).round 2
  '%0.02f' % hours
end

def format_duration(duration)
  hours = (duration / 3600.0).round 2
  "#{hours.floor.to_s.rjust 2}:#{(hours*60%60).round(0).to_s.rjust(2,'0')} (#{'%0.02f' % hours} hours)"
end

case options.fetch(:format)
when :default
  days.each do |date, tasks|
    puts date.strftime '%Y-%m-%d %A'
    tasks.each do |name, duration|
      puts "  #{name.ljust max_name_len} #{format_duration duration}"
    end
    puts "  #{footer_text.rjust max_name_len} #{format_duration tasks.values.inject(:+)}"
    puts
  end
when :'bulk-create'
  COLUMNS = %w[Date Person Work\ Reference Usage\ Code Docket UoM Rate\ Code Quantity Note]

  person_name = `osascript -e 'tell application "System Events" to get full name of current user'`.chomp
  raise unless $?.success?

  days.each do |date, tasks|
    tasks_by_work_reference = {}

    tasks.each do |name, duration|
      work_reference, note = name.split('|', 2).map(&:to_s).map(&:strip)

      if work_reference.split.first =~ /\A[A-Z]*\d+\z/
        work_reference = work_reference.split.first
      end

      tasks_by_work_reference[work_reference] ||= Hash.new(0)
      tasks_by_work_reference[work_reference][note] += duration
    end

    tasks_by_work_reference.each do |work_reference, tasks|
      duration = tasks.values.inject(:+)

      note = if tasks.size == 1
        tasks.keys.first
      else
        tasks = tasks.sort_by do |note, duration|
          [note ? 1 : 2, -duration]
        end
        tasks.map do |note, duration|
          "#{format_hours duration} #{note || 'other'}"
        end.join(', ')
      end

      row = {
        'Date' => date.strftime('%Y-%m-%d'),
        'Person' => person_name,
        'Work Reference' => work_reference,
        'Usage Code' => 'Normal',
        'UoM' => 'hours',
        'Quantity' => format_hours(duration),
        'Note' => note,
      }
      puts row.values_at(*COLUMNS).join("\t")
    end
    puts
  end

  weeks = {}

  days.each do |date, tasks|
    week = date.strftime('%Y %W')
    day = date.strftime('%u').to_i
    duration = tasks.values.inject(:+)

    weeks[week] ||= {}
    weeks[week][day] = duration
  end

  puts (1..7).map { |day| '  ' + Date::ABBR_DAYNAMES.fetch(day%7) }.join('  ') + '   Total'
  weeks.sort.last(2).each do |_, days|
    total = days.values.inject(:+)
    puts (1..7).map { |day| str = days[day] ? format_hours(days[day]) : ''; str.rjust(5) }.join('  ') + ' ' + format_hours(total).rjust(7)
  end
else
  raise 'unknown format'
end
