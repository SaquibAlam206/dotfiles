#!/bin/bash
# outpost_over_ssl
# hostmaster@spawncamp.net
#
# 2006-07-11 Original release.
# 2007-02-27 Usage info now has absolute path
# 2007-02-27 Now warns if socat is missing
# 2009-09-07 Fix SSL certificate. Use mktemp instead of $RANDOM.
# 2010-04-20 Updated SSL certificate (expiring 2011-04-21)
# 2010-04-20 Cleanup temp files automatically
# 2010-04-20 Rewritten help text and sample usage

if which socat > /dev/null
then
	true # socat found, all good
else
	echo Error: socat not found >&2
	echo >&2
	if [ "`uname -s`" == "Darwin" ]
	then
		echo Install MacPorts \<http://macports.org/\> and then type:>&2
		echo -e \\tport install socat>&2
	else
		if [ -f /etc/debian_version ]
		then
			echo You can install socat by typing:>&2
			echo -e \\tapt-get install socat>&2
		else
			echo Visit \<http://www.dest-unreach.org/socat/\> to download.>&2
		fi
		
	fi
	echo>&2
	exit 1;
fi

if [ "$2" == "" -a "$1" != "NONE" ]
then
	SELF=$0
	if [ -n "${SELF%%/*}" ]
	then
		SELF="${PWD}/$SELF"
	fi
	cat >&2 <<EOF

`basename "$SELF"` usage:
    Direct connection:
        ProxyCommand "$SELF" NONE
    Via HTTP proxy:
        ProxyCommand "$SELF" proxy-host port [user:pass]

Example ~/.ssh/config entry:
    
    Host outpost-ssl
        ProxyCommand "$SELF" NONE
        User `whoami`
        HostKeyAlias spawncamp.net
        ServerAliveInterval 30
        #LocalForward 3128 localhost:3128
        #DynamicForward 1080
    
    Change the User if your outpost username is not "`whoami`".
    
    Uncomment the LocalForward and/or DynamicForward entries if you want a
    HTTP proxy on localhost:3128 and/or a SOCKS proxy on localhost:1080.

EOF
	exit 1;
fi

BASENAME="`basename "$0"`"
WORK_DIR="`mktemp -d -t "$BASENAME.XXXXXX"`"
trap '{ rm -rf "$WORK_DIR"; }' EXIT

function socat_local_bind
{
	TMPFILE="`TMPDIR="$WORK_DIR" mktemp -t local_bind.XXXXXX`"
	(socat -d -d tcp4-listen:0,bind=127.0.0.1 $* 2> $TMPFILE) &
	SOCAT_PID=$!
	LINE1=""
	while [ -z "$LINE1" ] && kill -0 $SOCAT_PID 2> /dev/null
	do
		LINE1=`head -1 $TMPFILE`
		sleep 0.1
	done
	LISTEN_PORT=`echo $LINE1 | sed -n 's/.*127\.0\.0\.1://p'`
	if [ -z "$LISTEN_PORT" ]
	then
		echo Failed to run socat >&2
		cat $TMPFILE >&2
		exit 1;
	fi
}

if [ "$1" == "NONE" ]
then
	# we don't need to connect to the proxy server
	# so lets just create a listening socket that connects direct to outpost:443
	socat_local_bind tcp4:spawncamp.net:443
	LISTEN_PORT_SSL=$LISTEN_PORT
else
	# we need to connect to outpost:443 via the local proxy server
	socat_local_bind proxy:$1:spawncamp.net:443,proxyport=$2,proxyauth=$3
	LISTEN_PORT_SSL=$LISTEN_PORT
fi

# we now have a listening socket that connects to outpost:443
# create a socket that connects to the httpd over the outpost:443 forwarder 
socat_local_bind openssl:localhost:$LISTEN_PORT_SSL,openssl-verify=1,cafile=$0
LISTEN_PORT_REMOTE_PROXY=$LISTEN_PORT

# we now have a port that connects us to a proxy on outpost that we can use to
# get a connection to the SSH daemon. Lets use this proxy to connect stdio
# to the sshd.
socat stdio proxy:localhost:spawncamp.net:22,proxyport=$LISTEN_PORT_REMOTE_PROXY

false <<SPAWNCAMP_CERT
-----BEGIN CERTIFICATE-----
MIIH1zCCBr+gAwIBAgIDAYAnMA0GCSqGSIb3DQEBBQUAMIGMMQswCQYDVQQGEwJJ
TDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0
YWwgQ2VydGlmaWNhdGUgU2lnbmluZzE4MDYGA1UEAxMvU3RhcnRDb20gQ2xhc3Mg
MSBQcmltYXJ5IEludGVybWVkaWF0ZSBTZXJ2ZXIgQ0EwHhcNMTAwNDIwMDEyMTM3
WhcNMTEwNDIxMDUxNTA4WjCByTEgMB4GA1UEDRMXMTgyNzg4LWRsMlU3cTNwMDZ1
Tk9vRTExCzAJBgNVBAYTAkFVMR4wHAYDVQQKExVQZXJzb25hIE5vdCBWYWxpZGF0
ZWQxKTAnBgNVBAsTIFN0YXJ0Q29tIEZyZWUgQ2VydGlmaWNhdGUgTWVtYmVyMR4w
HAYDVQQDExVvdXRwb3N0LnNwYXduY2FtcC5uZXQxLTArBgkqhkiG9w0BCQEWHmhv
c3RtYXN0ZXItbm9zcGFtQGJhY2t0aWNrLm9yZzCCAiIwDQYJKoZIhvcNAQEBBQAD
ggIPADCCAgoCggIBAOfipZrPGRd0WCWKM+II/71QSV+uEE56k1RfubYkvNTRJ1dO
1u5ZBwqpWJufaCDWX++N4FFiPqadC7O+LXOKgtuBMBVeoY5JXtU+pUqsQymd4UOZ
D3NQY/cCYfWVLBLDL86sO/aXPR3+fRNKSU+3nFVL8F1j4fX46i5i9rrySWo2ab1/
YHAgaabCzww5yE86cvPLbqH2+y6CM2cL7BDtOslGMAdczIInBk33td/iV9wn63sh
5GdI/aQmvkhu+1JlnSPyWMmYRJZ5A2IPVL4fVxWvOSg7cuphvtX84uCy6OZzHSoB
zANAcT072BnMsw4jNVj+IwIWPlHXDEAwrYrSeheLUD0S70aCIK7QgdBQl3RjRKo0
c9iISeW0Hc7I9K0BvIamQjhS30MYeXwbF90HeRLzsQ2AiL8puFXUVXUpciKgvDE2
FKWxofbz+8AKuquTGBgG9ap4N0c9WYSGoyJn32aOMDysdRy2ObHM1BVldu/nPZE+
U4nzCcwWRorUzY3HwTv+q3lsTgOg7ZMcsZd3CjI5RXxtYmJ1bwlVHl4AmuaVkRuj
covmST9+NxfHNZ2PrMP3Ru2Ab6rUXAqrTm3Tp+U3Y05MsDUfMZJud973L+tsLkoH
TS+erWCCnHWs1myN8spdM1mclOB7mUoIOZAhf9fZQssfDJ/rIEuoGGfGGQ55AgMB
AAGjggMBMIIC/TAJBgNVHRMEAjAAMAsGA1UdDwQEAwIDqDATBgNVHSUEDDAKBggr
BgEFBQcDATAdBgNVHQ4EFgQU6SzHReOFNOPmtIjnlYbcj65jnrIwHwYDVR0jBBgw
FoAU60I00Jiwq5/0G2sI98xkLu8OLEUwLwYDVR0RBCgwJoIVb3V0cG9zdC5zcGF3
bmNhbXAubmV0gg1zcGF3bmNhbXAubmV0MIIBQgYDVR0gBIIBOTCCATUwggExBgsr
BgEEAYG1NwECATCCASAwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wu
Y29tL3BvbGljeS5wZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wu
Y29tL2ludGVybWVkaWF0ZS5wZGYwgbcGCCsGAQUFBwICMIGqMBQWDVN0YXJ0Q29t
IEx0ZC4wAwIBARqBkUxpbWl0ZWQgTGlhYmlsaXR5LCBzZWUgc2VjdGlvbiAqTGVn
YWwgTGltaXRhdGlvbnMqIG9mIHRoZSBTdGFydENvbSBDZXJ0aWZpY2F0aW9uIEF1
dGhvcml0eSBQb2xpY3kgYXZhaWxhYmxlIGF0IGh0dHA6Ly93d3cuc3RhcnRzc2wu
Y29tL3BvbGljeS5wZGYwYQYDVR0fBFowWDAqoCigJoYkaHR0cDovL3d3dy5zdGFy
dHNzbC5jb20vY3J0MS1jcmwuY3JsMCqgKKAmhiRodHRwOi8vY3JsLnN0YXJ0c3Ns
LmNvbS9jcnQxLWNybC5jcmwwgY4GCCsGAQUFBwEBBIGBMH8wOQYIKwYBBQUHMAGG
LWh0dHA6Ly9vY3NwLnN0YXJ0c3NsLmNvbS9zdWIvY2xhc3MxL3NlcnZlci9jYTBC
BggrBgEFBQcwAoY2aHR0cDovL3d3dy5zdGFydHNzbC5jb20vY2VydHMvc3ViLmNs
YXNzMS5zZXJ2ZXIuY2EuY3J0MCMGA1UdEgQcMBqGGGh0dHA6Ly93d3cuc3RhcnRz
c2wuY29tLzANBgkqhkiG9w0BAQUFAAOCAQEAey+mtxO5SObgZje9NkwERfX9ZPxQ
p6AFivmeAJNcPukwKNS4W3FAQ53bb00Pf7p1N8azPGAPo3BtTk97Mh0IKsDGlq1H
Ae+KN4OHjvxSlM5YWyt7gd0hpVc7IVvs64MceNoTzq6Rbup7WS8QalWs2FqMOsHh
n2qXeCRD6/uJpoGrYTTsjeWFT1M8iNTgZLGqjkmVLMiEvS5axvyB/6pVHY842lAW
fIu0XPRn05Mx95d+NTrIHHqHn1gPU0L8Hk2MBxHYAOGvgDZoKk8bRXSc+eaCmdWo
YBAefC34uOecc5IzzgbqrxX8lA0CSXJt4j6y423UaYUUAMX/NtXEl+imKA==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIH3jCCBcagAwIBAgIBCjANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW
MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
dGlvbiBBdXRob3JpdHkwHhcNMDcxMDI0MjA1NDE2WhcNMTIxMDIyMjA1NDE2WjCB
jDELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4xKzApBgNVBAsT
IlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25pbmcxODA2BgNVBAMTL1N0
YXJ0Q29tIENsYXNzIDEgUHJpbWFyeSBJbnRlcm1lZGlhdGUgU2VydmVyIENBMIIB
IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtonGrO8JUngHrJJj0PREGBiE
gFYfka7hh/oyULTTRwbw5gdfcA4Q9x3AzhA2NIVaD5Ksg8asWFI/ujjo/OenJOJA
pgh2wJJuniptTT9uYSAK21ne0n1jsz5G/vohURjXzTCm7QduO3CHtPn66+6CPAVv
kvek3AowHpNz/gfK11+AnSJYUq4G2ouHI2mw5CrY6oPSvfNx23BaKA+vWjhwRRI/
ME3NO68X5Q/LoKldSKqxYVDLNM08XMML6BDAjJvwAwNi/rJsPnIO7hxDKslIDlc5
xDEhyBDBLIf+VJVSH1I8MRKbf+fAoKVZ1eKPPvDVqOHXcDGpxLPPr21TLwb0pwID
AQABo4IDVzCCA1MwDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE
FOtCNNCYsKuf9BtrCPfMZC7vDixFMIGoBgNVHSMEgaAwgZ2AFE4L7xqkQFulF2mH
MMo0aEPQQa7yoYGBpH8wfTELMAkGA1UEBhMCSUwxFjAUBgNVBAoTDVN0YXJ0Q29t
IEx0ZC4xKzApBgNVBAsTIlNlY3VyZSBEaWdpdGFsIENlcnRpZmljYXRlIFNpZ25p
bmcxKTAnBgNVBAMTIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEB
MAkGA1UdEgQCMAAwPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzAChiFodHRwOi8v
d3d3LnN0YXJ0c3NsLmNvbS9zZnNjYS5jcnQwWwYDVR0fBFQwUjAnoCWgI4YhaHR0
cDovL3d3dy5zdGFydHNzbC5jb20vc2ZzY2EuY3JsMCegJaAjhiFodHRwOi8vY3Js
LnN0YXJ0c3NsLmNvbS9zZnNjYS5jcmwwggFdBgNVHSAEggFUMIIBUDCCAUwGCysG
AQQBgbU3AQEEMIIBOzAvBggrBgEFBQcCARYjaHR0cDovL2NlcnQuc3RhcnRjb20u
b3JnL3BvbGljeS5wZGYwNQYIKwYBBQUHAgEWKWh0dHA6Ly9jZXJ0LnN0YXJ0Y29t
Lm9yZy9pbnRlcm1lZGlhdGUucGRmMIHQBggrBgEFBQcCAjCBwzAnFiBTdGFydCBD
b21tZXJjaWFsIChTdGFydENvbSkgTHRkLjADAgEBGoGXTGltaXRlZCBMaWFiaWxp
dHksIHJlYWQgdGhlIHNlY3Rpb24gKkxlZ2FsIExpbWl0YXRpb25zKiBvZiB0aGUg
U3RhcnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgUG9saWN5IGF2YWlsYWJs
ZSBhdCBodHRwOi8vY2VydC5zdGFydGNvbS5vcmcvcG9saWN5LnBkZjARBglghkgB
hvhCAQEEBAMCAAcwUQYJYIZIAYb4QgENBEQWQlN0YXJ0Q29tIENsYXNzIDEgUHJp
bWFyeSBJbnRlcm1lZGlhdGUgRnJlZSBTU0wgU2VydmVyIENlcnRpZmljYXRlczAN
BgkqhkiG9w0BAQUFAAOCAgEAN9nwGVuwb7kFbGiREJ/EfPnRQ/JDsIIqbfPrglDY
P/q+mgx3Umd6tVrzkdnbu4GPgSJpp4b5k7qgJ/bVPJE8wgNmM/7/eDnqYEPKAFDI
duxVfPCEkF70nuwe6KK5UKvsiIYrH++cu6ENb8gtWNodtpuK+WUnSRFTwLEJuVk/
WemF0Ake/JPvoDxGnV8qLo1yMQdolfcdlHikpWAGHaNLc3mPqK29qxGoLNL+PrFx
mI0aNKHjuw7hl+yXFa6N25vXTtTzJDfaa8Iwf2D3YRSJC28/HH2HKdA9dNui9LFp
IkYc9uAyPQB3qFwRapaBhDQOmCtFyN1iOC8dtbUKsdp7/ZW5ImcZsP+a220Fc2+W
e0OQCeDenNpVorg9lKJovv5qQXnRfmBlac3HL1o6mWXI7gvlFoOlYPITAHgcvZHZ
lHrs45w+X26XFVXBAHNup8C7QiAKPTtk2M6Ii/xI1yYNpht4JANykesH4Ln4fYHw
1tH60t61XZ/Kbdg/pIzh1tE+QoUFlf+CR01qfskFjXcresRrgd00KOxgfJls6HnD
xoiEoL+c2vOoATe7vmvhKHv8S5pv1IBLnjJeQQqQsKY8lBYxf+b4Tl2xNddnBO28
G8P6HGtMDMHaPETF+esG9VpMNtJkq0eNiCzmEHc7MDlA6kpFIY0psK/W0aPh6hcO
MAg=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW
MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg
Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh
dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9
MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi
U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh
cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA
A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk
pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf
OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C
Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT
Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi
HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM
Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w
+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+
Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3
Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B
26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID
AQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE
FE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j
ZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js
LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM
BgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0
Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy
dGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh
cnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh
YmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg
dGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp
bGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ
YIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT
TCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ
9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8
jhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW
FjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz
ewT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1
ny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L
EUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu
L6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq
yvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC
O3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V
um0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh
NOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=
-----END CERTIFICATE-----
SPAWNCAMP_CERT
